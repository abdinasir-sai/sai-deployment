apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hrms-service.fullname" . }}
  labels:
    {{- include "hrms-service.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "hrms-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "hrms-service.selectorLabels" . | nindent 8 }}
    spec:
      hostAliases:
       - ip: "101.0.205.11"
         hostnames:
         - "hdp-master-01.local.com"
       - ip: "101.0.205.12"
         hostnames:
         - "hdp-master-02.local.com"
       - ip: "101.0.205.15"
         hostnames:
         - "hdp-worker-01.local.com"
       - ip: "101.0.205.16"
         hostnames:
         - "hdp-worker-02.local.com"
       - ip: "101.0.205.17"
         hostnames:
         - "hdp-worker-03.local.com"
       - ip: "101.0.205.18"
         hostnames:
         - "hdp-worker-04.local.com"
       - ip: "101.0.205.19"
         hostnames:
         - "hdp-worker-05.local.com"
       - ip: "101.0.205.13"
         hostnames:
         - "hdp-kafka-01.local.com"
       - ip: "101.0.205.14"
         hostnames:
         - "hdp-kafka-02.local.com"
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ if .Values.serviceAccount.create }}{{ .Values.serviceAccount.name }}{{ end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.ports.containerPort }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.ports.containerPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          {{- if .Values.livenessProbe.enable }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.ports.containerPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "-c", "nohup /opt/melodyposthook.sh > hook.log 2>&1 &"]
          resources:
            limits:
              cpu: {{ .Values.resourcesLimits.cpu }}
              memory: {{ .Values.resourcesLimits.memory }}
            requests:
              cpu: {{ .Values.requestsResources.cpu }}
              memory: {{ .Values.requestsResources.memory }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ quote $value }}
            {{- end }}
            - name: MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: {{ .Chart.Name }}
                  divisor: "0"
                  resource: limits.memory
          {{- if .Values.collectServer.register }}
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash","{{ .Values.collectServer.postStartScript }}"]
            {{- if .Values.collectServer.preStopEnable }}
            preStop:
              exec:
                command: ["/bin/bash","{{ .Values.collectServer.preStopScript }}"]
            {{- end }}
          {{- end }}
                 
          volumeMounts:
        - name: {{ .Values.sidecar.Name }}
          image: "{{ .Values.sidecar.image.repository }}:{{ .Values.sidecar.image.tag }}"
          imagePullPolicy: {{ .Values.sidecar.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.sidecar.ports.containerPort }}
              protocol: TCP
      volumes:
